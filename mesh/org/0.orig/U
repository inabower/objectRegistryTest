/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  v2012                                 |
|   \\  /    A nd           | Website:  www.openfoam.com                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   uniform (0 0 0);

boundaryField
{
    inlet
    {
        type            codedFixedValue;
        name            wave;
        value           uniform (0 0 0);
        
        code
        #{
            const fvMesh& mesh = patch().boundaryMesh().mesh();
            const Time& t = mesh.time();

            vectorField ans(patch().size(), Zero);
            forAll(ans, fi)
            {
                ans[fi].x() = 10.0* (1.0-cos(t.value()*3.141592*2.0))*(0.25-pow(patch().Cf()[fi].y(), 2.0));
            }
            operator==(ans);

            fvMesh& meshRef = const_cast<fvMesh&>(mesh);
            const word massInletName = "massInlet";
            if(!meshRef.foundObject<volScalarField>(massInletName))
            {
                autoPtr<volScalarField> massInletPtr(
                    new volScalarField
                    (
                        IOobject
                        (
                            massInletName,
                            meshRef.time().timeName(),
                            meshRef,
                            IOobject::NO_READ,
                            IOobject::AUTO_WRITE
                        ),
                        meshRef,
                        dimensionedScalar(dimless, Zero)
                    )
                );
                meshRef.objectRegistry::store(massInletPtr);
            }
            const scalarField& massInletFld = patch().lookupPatchField<volScalarField, scalar>(massInletName);
            scalarField& massInletRef = const_cast<scalarField&>(massInletFld);

            const scalarField& alpha = patch().lookupPatchField<volScalarField, scalar>("alpha.water");;

            forAll(massInletRef, fi)
            {
                massInletRef[fi] = (alpha[fi] * 1000 + (1.0 - alpha[fi]) * 800) * ans[fi].x();
            }
        #};
    }

    outlet
    {
        type            inletOutlet;
        inletValue      uniform (0 0 0);
        value           uniform (0 0 0);
    }

    "wall.*"
    {
        type            noSlip;
    }

    "empty.*"
    {
        type            empty;
    }
}


// ************************************************************************* //
